// Question- Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.
// A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
// For example, "ace" is a subsequence of "abcde".
// A common subsequence of two strings is a subsequence that is common to both strings.
// Example 1:
// Input: text1 = "abcde", text2 = "ace" 
// Output: 3  
// Explanation: The longest common subsequence is "ace" and its length is 3.

// DP solution- 
class Solution {
public:
    int solve(string &text1, string &text2){
        // if(itr1==text1.length()||itr2==text2.length())return 0;
        // if(dp[itr1][itr2]!=-1)return dp[itr1][itr2];
        // if(text1[itr1]==text2[itr2])return dp[itr1][itr2]= 1+ solve(text1,text2,itr1+1,itr2+1,dp);
        // else return dp[itr1][itr2]= max(solve(text1,text2,itr1+1,itr2,dp),solve(text1,text2,itr1,itr2+1,dp));
        vector<vector<int>>dp(text1.length()+1, vector<int>(text2.length()+1,0));
        for(int i=text1.length()-1;i>=0;i--){
            for(int j=text2.length()-1;j>=0;j--){
                int ans=0;
                if(text1[i]==text2[j]){
                    ans= 1+ dp[i+1][j+1];
                }
                else{
                    ans= max(dp[i+1][j],dp[i][j+1]);
                }
                dp[i][j]=ans;
            }
        }
        return dp[0][0];
    }
    int longestCommonSubsequence(string text1, string text2) {
        // vector<vector<int>>dp(text1.length()+1, vector<int>(text2.length()+1,-1));
        //return solve(text1,text2,0,0);
        return solve(text1,text2);
    }
};
