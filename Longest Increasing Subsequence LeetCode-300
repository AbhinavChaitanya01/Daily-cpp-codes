//Given an integer array nums, return the length of the longest strictly increasing subsequence.
//Example 1:
//Input: nums = [10,9,2,5,3,7,101,18]
//Output: 4
//Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

//DP Solution- 
class Solution {
public:
    int solve(vector<int>& nums, int size){
        // if(curr-1==size)return 0;
        // if(dp[prev][curr]!=-1)return dp[prev][curr];
        int ans = 1, n = nums.size();
        vector<int> dp(n, 1);
        for(int i = 0; i < n; i++) 
            for(int j = 0; j < i; j++) 
                if(nums[i] > nums[j]) 
				    dp[i] = max(dp[i], dp[j] + 1), ans = max(ans, dp[i]);
        return ans;
        //return dp[prev][curr]= max(pick, nonPick);
    }
    int lengthOfLIS(vector<int>& nums) {
        // vector<vector<int>>dp(nums.size()+2, vector<int>(nums.size()+2,-1));
        return solve(nums,nums.size());
    }
};
